/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * PRODUCT API DOC
 * PRODUCT API DOC
 * OpenAPI spec version: 0.0.1
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";
import type {
  MeetingResponseDTO,
  MeetingResponseDTOList,
  UserResponseDTO,
} from "../model";

export const getGetUserRoleResponseMock = (
  overrideResponse: Partial<UserResponseDTO> = {},
): UserResponseDTO => ({
  email: faker.string.alpha(20),
  role: faker.string.alpha(20),
  ...overrideResponse,
});

export const getSignUpResponseMock = (
  overrideResponse: Partial<UserResponseDTO> = {},
): UserResponseDTO => ({
  email: faker.string.alpha(20),
  role: faker.string.alpha(20),
  ...overrideResponse,
});

export const getChangePasswordResponseMock = (
  overrideResponse: Partial<UserResponseDTO> = {},
): UserResponseDTO => ({
  email: faker.string.alpha(20),
  role: faker.string.alpha(20),
  ...overrideResponse,
});

export const getLoginResponseMock = (
  overrideResponse: Partial<UserResponseDTO> = {},
): UserResponseDTO => ({
  email: faker.string.alpha(20),
  role: faker.string.alpha(20),
  ...overrideResponse,
});

export const getSearchMeetingsResponseMock = (
  overrideResponse: Partial<MeetingResponseDTOList> = {},
): MeetingResponseDTOList => ({
  results: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    detail: faker.string.alpha(20),
    endTime: faker.string.alpha(20),
    eventDate: faker.date.past().toISOString().split("T")[0],
    id: faker.number.int({ min: undefined, max: undefined }),
    openerId: faker.number.int({ min: undefined, max: undefined }),
    startTime: faker.string.alpha(20),
    title: faker.string.alpha(20),
  })),
  ...overrideResponse,
});

export const getReserveMeetingResponseMock = (
  overrideResponse: Partial<MeetingResponseDTO> = {},
): MeetingResponseDTO => ({
  detail: faker.string.alpha(20),
  endTime: faker.string.alpha(20),
  eventDate: faker.date.past().toISOString().split("T")[0],
  id: faker.number.int({ min: undefined, max: undefined }),
  openerId: faker.number.int({ min: undefined, max: undefined }),
  startTime: faker.string.alpha(20),
  title: faker.string.alpha(20),
  ...overrideResponse,
});

export const getGetMeetingByIDResponseMock = (
  overrideResponse: Partial<MeetingResponseDTO> = {},
): MeetingResponseDTO => ({
  detail: faker.string.alpha(20),
  endTime: faker.string.alpha(20),
  eventDate: faker.date.past().toISOString().split("T")[0],
  id: faker.number.int({ min: undefined, max: undefined }),
  openerId: faker.number.int({ min: undefined, max: undefined }),
  startTime: faker.string.alpha(20),
  title: faker.string.alpha(20),
  ...overrideResponse,
});

export const getUpdateMeetingResponseMock = (
  overrideResponse: Partial<MeetingResponseDTO> = {},
): MeetingResponseDTO => ({
  detail: faker.string.alpha(20),
  endTime: faker.string.alpha(20),
  eventDate: faker.date.past().toISOString().split("T")[0],
  id: faker.number.int({ min: undefined, max: undefined }),
  openerId: faker.number.int({ min: undefined, max: undefined }),
  startTime: faker.string.alpha(20),
  title: faker.string.alpha(20),
  ...overrideResponse,
});

export const getCheckHealthMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.get("*/health", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getGetUserRoleMockHandler = (
  overrideResponse?:
    | UserResponseDTO
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<UserResponseDTO> | UserResponseDTO),
) => {
  return http.get("*/user/role", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetUserRoleResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getSignUpMockHandler = (
  overrideResponse?:
    | UserResponseDTO
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<UserResponseDTO> | UserResponseDTO),
) => {
  return http.post("*/user/signup", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSignUpResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getChangePasswordMockHandler = (
  overrideResponse?:
    | UserResponseDTO
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<UserResponseDTO> | UserResponseDTO),
) => {
  return http.put("*/user/signup", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getChangePasswordResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getLoginMockHandler = (
  overrideResponse?:
    | UserResponseDTO
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<UserResponseDTO> | UserResponseDTO),
) => {
  return http.post("*/user/login", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getLoginResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostUserManageMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.post("*/user/manage", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getSearchMeetingsMockHandler = (
  overrideResponse?:
    | MeetingResponseDTOList
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<MeetingResponseDTOList> | MeetingResponseDTOList),
) => {
  return http.get("*/meeting", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSearchMeetingsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getReserveMeetingMockHandler = (
  overrideResponse?:
    | MeetingResponseDTO
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<MeetingResponseDTO> | MeetingResponseDTO),
) => {
  return http.post("*/meeting", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getReserveMeetingResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetMeetingByIDMockHandler = (
  overrideResponse?:
    | MeetingResponseDTO
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<MeetingResponseDTO> | MeetingResponseDTO),
) => {
  return http.get("*/meeting/:meetingId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetMeetingByIDResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getUpdateMeetingMockHandler = (
  overrideResponse?:
    | MeetingResponseDTO
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<MeetingResponseDTO> | MeetingResponseDTO),
) => {
  return http.put("*/meeting/:meetingId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getUpdateMeetingResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getCancelMeetingMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.delete("*/meeting/:meetingId", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 204 });
  });
};
export const getProductApiDocMock = () => [
  getCheckHealthMockHandler(),
  getGetUserRoleMockHandler(),
  getSignUpMockHandler(),
  getChangePasswordMockHandler(),
  getLoginMockHandler(),
  getPostUserManageMockHandler(),
  getSearchMeetingsMockHandler(),
  getReserveMeetingMockHandler(),
  getGetMeetingByIDMockHandler(),
  getUpdateMeetingMockHandler(),
  getCancelMeetingMockHandler(),
];
