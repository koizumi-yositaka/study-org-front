/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * PRODUCT API DOC
 * PRODUCT API DOC
 * OpenAPI spec version: 0.0.1
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";
import type {
  MeetingResponseDTO,
  MeetingResponseDTOList,
  UserResponseDTO,
} from "../model";

export const getGetUserRoleResponseMock = (
  overrideResponse: Partial<UserResponseDTO> = {},
): UserResponseDTO => ({
  email: faker.string.alpha(20),
  role: faker.string.alpha(20),
  ...overrideResponse,
});

export const getPostUserSignupResponseMock = (
  overrideResponse: Partial<UserResponseDTO> = {},
): UserResponseDTO => ({
  email: faker.string.alpha(20),
  role: faker.string.alpha(20),
  ...overrideResponse,
});

export const getPutUserSignupResponseMock = (
  overrideResponse: Partial<UserResponseDTO> = {},
): UserResponseDTO => ({
  email: faker.string.alpha(20),
  role: faker.string.alpha(20),
  ...overrideResponse,
});

export const getPostUserLoginResponseMock = (
  overrideResponse: Partial<UserResponseDTO> = {},
): UserResponseDTO => ({
  email: faker.string.alpha(20),
  role: faker.string.alpha(20),
  ...overrideResponse,
});

export const getGetMeetingResponseMock = (
  overrideResponse: Partial<MeetingResponseDTOList> = {},
): MeetingResponseDTOList => ({
  results: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.number.int({ min: undefined, max: undefined }),
    title: faker.string.alpha(20),
  })),
  ...overrideResponse,
});

export const getPostMeetingResponseMock = (
  overrideResponse: Partial<MeetingResponseDTO> = {},
): MeetingResponseDTO => ({
  id: faker.number.int({ min: undefined, max: undefined }),
  title: faker.string.alpha(20),
  ...overrideResponse,
});

export const getGetMeetingMeetingIdResponseMock = (
  overrideResponse: Partial<MeetingResponseDTO> = {},
): MeetingResponseDTO => ({
  id: faker.number.int({ min: undefined, max: undefined }),
  title: faker.string.alpha(20),
  ...overrideResponse,
});

export const getPutMeetingMeetingIdResponseMock = (
  overrideResponse: Partial<MeetingResponseDTO> = {},
): MeetingResponseDTO => ({
  id: faker.number.int({ min: undefined, max: undefined }),
  title: faker.string.alpha(20),
  ...overrideResponse,
});

export const getGetHealthMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.get("*/health", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getGetUserRoleMockHandler = (
  overrideResponse?:
    | UserResponseDTO
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<UserResponseDTO> | UserResponseDTO),
) => {
  return http.get("*/user/role", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetUserRoleResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostUserSignupMockHandler = (
  overrideResponse?:
    | UserResponseDTO
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<UserResponseDTO> | UserResponseDTO),
) => {
  return http.post("*/user/signup", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostUserSignupResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPutUserSignupMockHandler = (
  overrideResponse?:
    | UserResponseDTO
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<UserResponseDTO> | UserResponseDTO),
) => {
  return http.put("*/user/signup", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPutUserSignupResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostUserLoginMockHandler = (
  overrideResponse?:
    | UserResponseDTO
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<UserResponseDTO> | UserResponseDTO),
) => {
  return http.post("*/user/login", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostUserLoginResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostUserManageMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.post("*/user/manage", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getGetMeetingMockHandler = (
  overrideResponse?:
    | MeetingResponseDTOList
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<MeetingResponseDTOList> | MeetingResponseDTOList),
) => {
  return http.get("*/meeting", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetMeetingResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostMeetingMockHandler = (
  overrideResponse?:
    | MeetingResponseDTO
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<MeetingResponseDTO> | MeetingResponseDTO),
) => {
  return http.post("*/meeting", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostMeetingResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetMeetingMeetingIdMockHandler = (
  overrideResponse?:
    | MeetingResponseDTO
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<MeetingResponseDTO> | MeetingResponseDTO),
) => {
  return http.get("*/meeting/:meetingId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetMeetingMeetingIdResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPutMeetingMeetingIdMockHandler = (
  overrideResponse?:
    | MeetingResponseDTO
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<MeetingResponseDTO> | MeetingResponseDTO),
) => {
  return http.put("*/meeting/:meetingId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPutMeetingMeetingIdResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getDeleteMeetingMeetingIdMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.delete("*/meeting/:meetingId", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 204 });
  });
};
export const getProductApiDocMock = () => [
  getGetHealthMockHandler(),
  getGetUserRoleMockHandler(),
  getPostUserSignupMockHandler(),
  getPutUserSignupMockHandler(),
  getPostUserLoginMockHandler(),
  getPostUserManageMockHandler(),
  getGetMeetingMockHandler(),
  getPostMeetingMockHandler(),
  getGetMeetingMeetingIdMockHandler(),
  getPutMeetingMeetingIdMockHandler(),
  getDeleteMeetingMeetingIdMockHandler(),
];
