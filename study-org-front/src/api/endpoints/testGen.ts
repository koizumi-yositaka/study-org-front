/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * PRODUCT API DOC
 * PRODUCT API DOC
 * OpenAPI spec version: 0.0.1
 */
import { useMutation, useQuery, useSuspenseQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { useCallback } from "react";
import type {
  BadRequestError,
  ForbiddenError,
  LoginUserForm,
  MeetingForm,
  MeetingResponseDTO,
  MeetingResponseDTOList,
  ResourceNotFoundError,
  UserResponseDTO,
} from "../model";
import { useCustomInstance } from "../../../use-custom-instance";

export const useGetHealthHook = () => {
  const getHealth = useCustomInstance<void>();

  return useCallback(
    (signal?: AbortSignal) => {
      return getHealth({ url: `/health`, method: "GET", signal });
    },
    [getHealth],
  );
};

export const getGetHealthQueryKey = () => {
  return [`/health`] as const;
};

export const useGetHealthQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetHealthHook>>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetHealthHook>>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetHealthQueryKey();

  const getHealth = useGetHealthHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useGetHealthHook>>>
  > = ({ signal }) => getHealth(signal);

  return {
    queryKey,
    queryFn,
    staleTime: 30000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetHealthHook>>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetHealthQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useGetHealthHook>>>
>;
export type GetHealthQueryError = unknown;

export function useGetHealth<
  TData = Awaited<ReturnType<ReturnType<typeof useGetHealthHook>>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetHealthHook>>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<ReturnType<typeof useGetHealthHook>>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetHealth<
  TData = Awaited<ReturnType<ReturnType<typeof useGetHealthHook>>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetHealthHook>>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<ReturnType<typeof useGetHealthHook>>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetHealth<
  TData = Awaited<ReturnType<ReturnType<typeof useGetHealthHook>>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetHealthHook>>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetHealth<
  TData = Awaited<ReturnType<ReturnType<typeof useGetHealthHook>>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetHealthHook>>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = useGetHealthQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const useGetHealthSuspenseQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetHealthHook>>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetHealthHook>>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetHealthQueryKey();

  const getHealth = useGetHealthHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useGetHealthHook>>>
  > = ({ signal }) => getHealth(signal);

  return {
    queryKey,
    queryFn,
    staleTime: 30000,
    ...queryOptions,
  } as UseSuspenseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetHealthHook>>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetHealthSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useGetHealthHook>>>
>;
export type GetHealthSuspenseQueryError = unknown;

export function useGetHealthSuspense<
  TData = Awaited<ReturnType<ReturnType<typeof useGetHealthHook>>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetHealthHook>>>,
      TError,
      TData
    >
  >;
}): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetHealthSuspense<
  TData = Awaited<ReturnType<ReturnType<typeof useGetHealthHook>>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetHealthHook>>>,
      TError,
      TData
    >
  >;
}): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetHealthSuspense<
  TData = Awaited<ReturnType<ReturnType<typeof useGetHealthHook>>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetHealthHook>>>,
      TError,
      TData
    >
  >;
}): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};

export function useGetHealthSuspense<
  TData = Awaited<ReturnType<ReturnType<typeof useGetHealthHook>>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetHealthHook>>>,
      TError,
      TData
    >
  >;
}): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
} {
  const queryOptions = useGetHealthSuspenseQueryOptions(options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const useGetUserRoleHook = () => {
  const getUserRole = useCustomInstance<UserResponseDTO>();

  return useCallback(
    (signal?: AbortSignal) => {
      return getUserRole({ url: `/user/role`, method: "GET", signal });
    },
    [getUserRole],
  );
};

export const getGetUserRoleQueryKey = () => {
  return [`/user/role`] as const;
};

export const useGetUserRoleQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUserRoleQueryKey();

  const getUserRole = useGetUserRoleHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>
  > = ({ signal }) => getUserRole(signal);

  return {
    queryKey,
    queryFn,
    staleTime: 30000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetUserRoleQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>
>;
export type GetUserRoleQueryError = void;

export function useGetUserRole<
  TData = Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>,
  TError = void,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetUserRole<
  TData = Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetUserRole<
  TData = Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetUserRole<
  TData = Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = useGetUserRoleQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const useGetUserRoleSuspenseQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUserRoleQueryKey();

  const getUserRole = useGetUserRoleHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>
  > = ({ signal }) => getUserRole(signal);

  return {
    queryKey,
    queryFn,
    staleTime: 30000,
    ...queryOptions,
  } as UseSuspenseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetUserRoleSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>
>;
export type GetUserRoleSuspenseQueryError = void;

export function useGetUserRoleSuspense<
  TData = Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>,
  TError = void,
>(options: {
  query: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>,
      TError,
      TData
    >
  >;
}): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetUserRoleSuspense<
  TData = Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>,
      TError,
      TData
    >
  >;
}): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetUserRoleSuspense<
  TData = Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>,
      TError,
      TData
    >
  >;
}): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};

export function useGetUserRoleSuspense<
  TData = Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>,
      TError,
      TData
    >
  >;
}): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
} {
  const queryOptions = useGetUserRoleSuspenseQueryOptions(options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const usePostUserSignupHook = () => {
  const postUserSignup = useCustomInstance<UserResponseDTO>();

  return useCallback(
    (loginUserForm: LoginUserForm, signal?: AbortSignal) => {
      return postUserSignup({
        url: `/user/signup`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: loginUserForm,
        signal,
      });
    },
    [postUserSignup],
  );
};

export const usePostUserSignupMutationOptions = <
  TError = ResourceNotFoundError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof usePostUserSignupHook>>>,
    TError,
    { data: LoginUserForm },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof usePostUserSignupHook>>>,
  TError,
  { data: LoginUserForm },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const postUserSignup = usePostUserSignupHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof usePostUserSignupHook>>>,
    { data: LoginUserForm }
  > = (props) => {
    const { data } = props ?? {};

    return postUserSignup(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostUserSignupMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof usePostUserSignupHook>>>
>;
export type PostUserSignupMutationBody = LoginUserForm;
export type PostUserSignupMutationError = ResourceNotFoundError;

export const usePostUserSignup = <
  TError = ResourceNotFoundError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof usePostUserSignupHook>>>,
    TError,
    { data: LoginUserForm },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<ReturnType<typeof usePostUserSignupHook>>>,
  TError,
  { data: LoginUserForm },
  TContext
> => {
  const mutationOptions = usePostUserSignupMutationOptions(options);

  return useMutation(mutationOptions);
};

export const usePutUserSignupHook = () => {
  const putUserSignup = useCustomInstance<UserResponseDTO>();

  return useCallback(
    (loginUserForm: LoginUserForm) => {
      return putUserSignup({
        url: `/user/signup`,
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        data: loginUserForm,
      });
    },
    [putUserSignup],
  );
};

export const usePutUserSignupMutationOptions = <
  TError = ResourceNotFoundError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof usePutUserSignupHook>>>,
    TError,
    { data: LoginUserForm },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof usePutUserSignupHook>>>,
  TError,
  { data: LoginUserForm },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const putUserSignup = usePutUserSignupHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof usePutUserSignupHook>>>,
    { data: LoginUserForm }
  > = (props) => {
    const { data } = props ?? {};

    return putUserSignup(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutUserSignupMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof usePutUserSignupHook>>>
>;
export type PutUserSignupMutationBody = LoginUserForm;
export type PutUserSignupMutationError = ResourceNotFoundError;

export const usePutUserSignup = <
  TError = ResourceNotFoundError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof usePutUserSignupHook>>>,
    TError,
    { data: LoginUserForm },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<ReturnType<typeof usePutUserSignupHook>>>,
  TError,
  { data: LoginUserForm },
  TContext
> => {
  const mutationOptions = usePutUserSignupMutationOptions(options);

  return useMutation(mutationOptions);
};

export const usePostUserLoginHook = () => {
  const postUserLogin = useCustomInstance<UserResponseDTO>();

  return useCallback(
    (loginUserForm: LoginUserForm, signal?: AbortSignal) => {
      return postUserLogin({
        url: `/user/login`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: loginUserForm,
        signal,
      });
    },
    [postUserLogin],
  );
};

export const usePostUserLoginMutationOptions = <
  TError = ForbiddenError | ResourceNotFoundError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof usePostUserLoginHook>>>,
    TError,
    { data: LoginUserForm },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof usePostUserLoginHook>>>,
  TError,
  { data: LoginUserForm },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const postUserLogin = usePostUserLoginHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof usePostUserLoginHook>>>,
    { data: LoginUserForm }
  > = (props) => {
    const { data } = props ?? {};

    return postUserLogin(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostUserLoginMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof usePostUserLoginHook>>>
>;
export type PostUserLoginMutationBody = LoginUserForm;
export type PostUserLoginMutationError = ForbiddenError | ResourceNotFoundError;

export const usePostUserLogin = <
  TError = ForbiddenError | ResourceNotFoundError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof usePostUserLoginHook>>>,
    TError,
    { data: LoginUserForm },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<ReturnType<typeof usePostUserLoginHook>>>,
  TError,
  { data: LoginUserForm },
  TContext
> => {
  const mutationOptions = usePostUserLoginMutationOptions(options);

  return useMutation(mutationOptions);
};

export const usePostUserManageHook = () => {
  const postUserManage = useCustomInstance<void>();

  return useCallback(
    (signal?: AbortSignal) => {
      return postUserManage({ url: `/user/manage`, method: "POST", signal });
    },
    [postUserManage],
  );
};

export const usePostUserManageMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof usePostUserManageHook>>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof usePostUserManageHook>>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const postUserManage = usePostUserManageHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof usePostUserManageHook>>>,
    void
  > = () => {
    return postUserManage();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostUserManageMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof usePostUserManageHook>>>
>;

export type PostUserManageMutationError = void;

export const usePostUserManage = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof usePostUserManageHook>>>,
    TError,
    void,
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<ReturnType<typeof usePostUserManageHook>>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = usePostUserManageMutationOptions(options);

  return useMutation(mutationOptions);
};

export const useGetMeetingHook = () => {
  const getMeeting = useCustomInstance<MeetingResponseDTOList>();

  return useCallback(
    (signal?: AbortSignal) => {
      return getMeeting({ url: `/meeting`, method: "GET", signal });
    },
    [getMeeting],
  );
};

export const getGetMeetingQueryKey = () => {
  return [`/meeting`] as const;
};

export const useGetMeetingQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetMeetingHook>>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetMeetingHook>>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetMeetingQueryKey();

  const getMeeting = useGetMeetingHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useGetMeetingHook>>>
  > = ({ signal }) => getMeeting(signal);

  return {
    queryKey,
    queryFn,
    staleTime: 30000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetMeetingHook>>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetMeetingQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useGetMeetingHook>>>
>;
export type GetMeetingQueryError = unknown;

export function useGetMeeting<
  TData = Awaited<ReturnType<ReturnType<typeof useGetMeetingHook>>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetMeetingHook>>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<ReturnType<typeof useGetMeetingHook>>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetMeeting<
  TData = Awaited<ReturnType<ReturnType<typeof useGetMeetingHook>>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetMeetingHook>>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<ReturnType<typeof useGetMeetingHook>>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetMeeting<
  TData = Awaited<ReturnType<ReturnType<typeof useGetMeetingHook>>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetMeetingHook>>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetMeeting<
  TData = Awaited<ReturnType<ReturnType<typeof useGetMeetingHook>>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetMeetingHook>>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = useGetMeetingQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const useGetMeetingSuspenseQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetMeetingHook>>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetMeetingHook>>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetMeetingQueryKey();

  const getMeeting = useGetMeetingHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useGetMeetingHook>>>
  > = ({ signal }) => getMeeting(signal);

  return {
    queryKey,
    queryFn,
    staleTime: 30000,
    ...queryOptions,
  } as UseSuspenseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetMeetingHook>>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetMeetingSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useGetMeetingHook>>>
>;
export type GetMeetingSuspenseQueryError = unknown;

export function useGetMeetingSuspense<
  TData = Awaited<ReturnType<ReturnType<typeof useGetMeetingHook>>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetMeetingHook>>>,
      TError,
      TData
    >
  >;
}): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetMeetingSuspense<
  TData = Awaited<ReturnType<ReturnType<typeof useGetMeetingHook>>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetMeetingHook>>>,
      TError,
      TData
    >
  >;
}): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetMeetingSuspense<
  TData = Awaited<ReturnType<ReturnType<typeof useGetMeetingHook>>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetMeetingHook>>>,
      TError,
      TData
    >
  >;
}): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};

export function useGetMeetingSuspense<
  TData = Awaited<ReturnType<ReturnType<typeof useGetMeetingHook>>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetMeetingHook>>>,
      TError,
      TData
    >
  >;
}): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
} {
  const queryOptions = useGetMeetingSuspenseQueryOptions(options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const usePostMeetingHook = () => {
  const postMeeting = useCustomInstance<MeetingResponseDTO>();

  return useCallback(
    (meetingForm: MeetingForm, signal?: AbortSignal) => {
      return postMeeting({
        url: `/meeting`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: meetingForm,
        signal,
      });
    },
    [postMeeting],
  );
};

export const usePostMeetingMutationOptions = <
  TError = BadRequestError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof usePostMeetingHook>>>,
    TError,
    { data: MeetingForm },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof usePostMeetingHook>>>,
  TError,
  { data: MeetingForm },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const postMeeting = usePostMeetingHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof usePostMeetingHook>>>,
    { data: MeetingForm }
  > = (props) => {
    const { data } = props ?? {};

    return postMeeting(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostMeetingMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof usePostMeetingHook>>>
>;
export type PostMeetingMutationBody = MeetingForm;
export type PostMeetingMutationError = BadRequestError;

export const usePostMeeting = <
  TError = BadRequestError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof usePostMeetingHook>>>,
    TError,
    { data: MeetingForm },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<ReturnType<typeof usePostMeetingHook>>>,
  TError,
  { data: MeetingForm },
  TContext
> => {
  const mutationOptions = usePostMeetingMutationOptions(options);

  return useMutation(mutationOptions);
};

export const useGetMeetingMeetingIdHook = () => {
  const getMeetingMeetingId = useCustomInstance<MeetingResponseDTO>();

  return useCallback(
    (meetingId: number, signal?: AbortSignal) => {
      return getMeetingMeetingId({
        url: `/meeting/${meetingId}`,
        method: "GET",
        signal,
      });
    },
    [getMeetingMeetingId],
  );
};

export const getGetMeetingMeetingIdQueryKey = (meetingId: number) => {
  return [`/meeting/${meetingId}`] as const;
};

export const useGetMeetingMeetingIdQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetMeetingMeetingIdHook>>>,
  TError = BadRequestError | ResourceNotFoundError,
>(
  meetingId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetMeetingMeetingIdHook>>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetMeetingMeetingIdQueryKey(meetingId);

  const getMeetingMeetingId = useGetMeetingMeetingIdHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useGetMeetingMeetingIdHook>>>
  > = ({ signal }) => getMeetingMeetingId(meetingId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!meetingId,
    staleTime: 30000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetMeetingMeetingIdHook>>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetMeetingMeetingIdQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useGetMeetingMeetingIdHook>>>
>;
export type GetMeetingMeetingIdQueryError =
  | BadRequestError
  | ResourceNotFoundError;

export function useGetMeetingMeetingId<
  TData = Awaited<ReturnType<ReturnType<typeof useGetMeetingMeetingIdHook>>>,
  TError = BadRequestError | ResourceNotFoundError,
>(
  meetingId: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetMeetingMeetingIdHook>>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetMeetingMeetingIdHook>>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetMeetingMeetingId<
  TData = Awaited<ReturnType<ReturnType<typeof useGetMeetingMeetingIdHook>>>,
  TError = BadRequestError | ResourceNotFoundError,
>(
  meetingId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetMeetingMeetingIdHook>>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetMeetingMeetingIdHook>>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetMeetingMeetingId<
  TData = Awaited<ReturnType<ReturnType<typeof useGetMeetingMeetingIdHook>>>,
  TError = BadRequestError | ResourceNotFoundError,
>(
  meetingId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetMeetingMeetingIdHook>>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetMeetingMeetingId<
  TData = Awaited<ReturnType<ReturnType<typeof useGetMeetingMeetingIdHook>>>,
  TError = BadRequestError | ResourceNotFoundError,
>(
  meetingId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetMeetingMeetingIdHook>>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = useGetMeetingMeetingIdQueryOptions(meetingId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const useGetMeetingMeetingIdSuspenseQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetMeetingMeetingIdHook>>>,
  TError = BadRequestError | ResourceNotFoundError,
>(
  meetingId: number,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetMeetingMeetingIdHook>>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetMeetingMeetingIdQueryKey(meetingId);

  const getMeetingMeetingId = useGetMeetingMeetingIdHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useGetMeetingMeetingIdHook>>>
  > = ({ signal }) => getMeetingMeetingId(meetingId, signal);

  return {
    queryKey,
    queryFn,
    staleTime: 30000,
    ...queryOptions,
  } as UseSuspenseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetMeetingMeetingIdHook>>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetMeetingMeetingIdSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useGetMeetingMeetingIdHook>>>
>;
export type GetMeetingMeetingIdSuspenseQueryError =
  | BadRequestError
  | ResourceNotFoundError;

export function useGetMeetingMeetingIdSuspense<
  TData = Awaited<ReturnType<ReturnType<typeof useGetMeetingMeetingIdHook>>>,
  TError = BadRequestError | ResourceNotFoundError,
>(
  meetingId: number,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetMeetingMeetingIdHook>>>,
        TError,
        TData
      >
    >;
  },
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetMeetingMeetingIdSuspense<
  TData = Awaited<ReturnType<ReturnType<typeof useGetMeetingMeetingIdHook>>>,
  TError = BadRequestError | ResourceNotFoundError,
>(
  meetingId: number,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetMeetingMeetingIdHook>>>,
        TError,
        TData
      >
    >;
  },
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetMeetingMeetingIdSuspense<
  TData = Awaited<ReturnType<ReturnType<typeof useGetMeetingMeetingIdHook>>>,
  TError = BadRequestError | ResourceNotFoundError,
>(
  meetingId: number,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetMeetingMeetingIdHook>>>,
        TError,
        TData
      >
    >;
  },
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};

export function useGetMeetingMeetingIdSuspense<
  TData = Awaited<ReturnType<ReturnType<typeof useGetMeetingMeetingIdHook>>>,
  TError = BadRequestError | ResourceNotFoundError,
>(
  meetingId: number,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetMeetingMeetingIdHook>>>,
        TError,
        TData
      >
    >;
  },
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
} {
  const queryOptions = useGetMeetingMeetingIdSuspenseQueryOptions(
    meetingId,
    options,
  );

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const usePutMeetingMeetingIdHook = () => {
  const putMeetingMeetingId = useCustomInstance<MeetingResponseDTO>();

  return useCallback(
    (meetingId: number, meetingForm: MeetingForm) => {
      return putMeetingMeetingId({
        url: `/meeting/${meetingId}`,
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        data: meetingForm,
      });
    },
    [putMeetingMeetingId],
  );
};

export const usePutMeetingMeetingIdMutationOptions = <
  TError = BadRequestError | ForbiddenError | ResourceNotFoundError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof usePutMeetingMeetingIdHook>>>,
    TError,
    { meetingId: number; data: MeetingForm },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof usePutMeetingMeetingIdHook>>>,
  TError,
  { meetingId: number; data: MeetingForm },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const putMeetingMeetingId = usePutMeetingMeetingIdHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof usePutMeetingMeetingIdHook>>>,
    { meetingId: number; data: MeetingForm }
  > = (props) => {
    const { meetingId, data } = props ?? {};

    return putMeetingMeetingId(meetingId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutMeetingMeetingIdMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof usePutMeetingMeetingIdHook>>>
>;
export type PutMeetingMeetingIdMutationBody = MeetingForm;
export type PutMeetingMeetingIdMutationError =
  | BadRequestError
  | ForbiddenError
  | ResourceNotFoundError;

export const usePutMeetingMeetingId = <
  TError = BadRequestError | ForbiddenError | ResourceNotFoundError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof usePutMeetingMeetingIdHook>>>,
    TError,
    { meetingId: number; data: MeetingForm },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<ReturnType<typeof usePutMeetingMeetingIdHook>>>,
  TError,
  { meetingId: number; data: MeetingForm },
  TContext
> => {
  const mutationOptions = usePutMeetingMeetingIdMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * 要素の削除
 */
export const useDeleteMeetingMeetingIdHook = () => {
  const deleteMeetingMeetingId = useCustomInstance<void>();

  return useCallback(
    (meetingId: number) => {
      return deleteMeetingMeetingId({
        url: `/meeting/${meetingId}`,
        method: "DELETE",
      });
    },
    [deleteMeetingMeetingId],
  );
};

export const useDeleteMeetingMeetingIdMutationOptions = <
  TError = BadRequestError | ResourceNotFoundError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useDeleteMeetingMeetingIdHook>>>,
    TError,
    { meetingId: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useDeleteMeetingMeetingIdHook>>>,
  TError,
  { meetingId: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const deleteMeetingMeetingId = useDeleteMeetingMeetingIdHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useDeleteMeetingMeetingIdHook>>>,
    { meetingId: number }
  > = (props) => {
    const { meetingId } = props ?? {};

    return deleteMeetingMeetingId(meetingId);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteMeetingMeetingIdMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useDeleteMeetingMeetingIdHook>>>
>;

export type DeleteMeetingMeetingIdMutationError =
  | BadRequestError
  | ResourceNotFoundError;

export const useDeleteMeetingMeetingId = <
  TError = BadRequestError | ResourceNotFoundError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useDeleteMeetingMeetingIdHook>>>,
    TError,
    { meetingId: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<ReturnType<typeof useDeleteMeetingMeetingIdHook>>>,
  TError,
  { meetingId: number },
  TContext
> => {
  const mutationOptions = useDeleteMeetingMeetingIdMutationOptions(options);

  return useMutation(mutationOptions);
};
