/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * PRODUCT API DOC
 * PRODUCT API DOC
 * OpenAPI spec version: 0.0.1
 */
import { useMutation, useQuery, useSuspenseQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { useCallback } from "react";
import type {
  BadRequestError,
  ConflictError,
  ForbiddenError,
  LoginUserForm,
  MeetingForm,
  MeetingResponseDTO,
  MeetingResponseDTOList,
  ResourceNotFoundError,
  SearchMeetingsParams,
  UserResponseDTO,
} from "../model";
import { useCustomInstance } from "../../../use-custom-instance";

export const useCheckHealthHook = () => {
  const checkHealth = useCustomInstance<void>();

  return useCallback(
    (signal?: AbortSignal) => {
      return checkHealth({ url: `/health`, method: "GET", signal });
    },
    [checkHealth],
  );
};

export const getCheckHealthQueryKey = () => {
  return [`/health`] as const;
};

export const useCheckHealthQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useCheckHealthHook>>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useCheckHealthHook>>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getCheckHealthQueryKey();

  const checkHealth = useCheckHealthHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useCheckHealthHook>>>
  > = ({ signal }) => checkHealth(signal);

  return {
    queryKey,
    queryFn,
    staleTime: 30000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useCheckHealthHook>>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type CheckHealthQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useCheckHealthHook>>>
>;
export type CheckHealthQueryError = unknown;

export function useCheckHealth<
  TData = Awaited<ReturnType<ReturnType<typeof useCheckHealthHook>>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useCheckHealthHook>>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<ReturnType<typeof useCheckHealthHook>>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useCheckHealth<
  TData = Awaited<ReturnType<ReturnType<typeof useCheckHealthHook>>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useCheckHealthHook>>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<ReturnType<typeof useCheckHealthHook>>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useCheckHealth<
  TData = Awaited<ReturnType<ReturnType<typeof useCheckHealthHook>>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useCheckHealthHook>>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useCheckHealth<
  TData = Awaited<ReturnType<ReturnType<typeof useCheckHealthHook>>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useCheckHealthHook>>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = useCheckHealthQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const useCheckHealthSuspenseQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useCheckHealthHook>>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useCheckHealthHook>>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getCheckHealthQueryKey();

  const checkHealth = useCheckHealthHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useCheckHealthHook>>>
  > = ({ signal }) => checkHealth(signal);

  return {
    queryKey,
    queryFn,
    staleTime: 30000,
    ...queryOptions,
  } as UseSuspenseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useCheckHealthHook>>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type CheckHealthSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useCheckHealthHook>>>
>;
export type CheckHealthSuspenseQueryError = unknown;

export function useCheckHealthSuspense<
  TData = Awaited<ReturnType<ReturnType<typeof useCheckHealthHook>>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useCheckHealthHook>>>,
      TError,
      TData
    >
  >;
}): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useCheckHealthSuspense<
  TData = Awaited<ReturnType<ReturnType<typeof useCheckHealthHook>>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useCheckHealthHook>>>,
      TError,
      TData
    >
  >;
}): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useCheckHealthSuspense<
  TData = Awaited<ReturnType<ReturnType<typeof useCheckHealthHook>>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useCheckHealthHook>>>,
      TError,
      TData
    >
  >;
}): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};

export function useCheckHealthSuspense<
  TData = Awaited<ReturnType<ReturnType<typeof useCheckHealthHook>>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useCheckHealthHook>>>,
      TError,
      TData
    >
  >;
}): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
} {
  const queryOptions = useCheckHealthSuspenseQueryOptions(options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const useGetUserRoleHook = () => {
  const getUserRole = useCustomInstance<UserResponseDTO>();

  return useCallback(
    (signal?: AbortSignal) => {
      return getUserRole({ url: `/user/role`, method: "GET", signal });
    },
    [getUserRole],
  );
};

export const getGetUserRoleQueryKey = () => {
  return [`/user/role`] as const;
};

export const useGetUserRoleQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUserRoleQueryKey();

  const getUserRole = useGetUserRoleHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>
  > = ({ signal }) => getUserRole(signal);

  return {
    queryKey,
    queryFn,
    staleTime: 30000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetUserRoleQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>
>;
export type GetUserRoleQueryError = void;

export function useGetUserRole<
  TData = Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>,
  TError = void,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetUserRole<
  TData = Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetUserRole<
  TData = Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetUserRole<
  TData = Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = useGetUserRoleQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const useGetUserRoleSuspenseQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUserRoleQueryKey();

  const getUserRole = useGetUserRoleHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>
  > = ({ signal }) => getUserRole(signal);

  return {
    queryKey,
    queryFn,
    staleTime: 30000,
    ...queryOptions,
  } as UseSuspenseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetUserRoleSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>
>;
export type GetUserRoleSuspenseQueryError = void;

export function useGetUserRoleSuspense<
  TData = Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>,
  TError = void,
>(options: {
  query: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>,
      TError,
      TData
    >
  >;
}): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetUserRoleSuspense<
  TData = Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>,
      TError,
      TData
    >
  >;
}): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetUserRoleSuspense<
  TData = Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>,
      TError,
      TData
    >
  >;
}): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};

export function useGetUserRoleSuspense<
  TData = Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetUserRoleHook>>>,
      TError,
      TData
    >
  >;
}): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
} {
  const queryOptions = useGetUserRoleSuspenseQueryOptions(options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const useSignUpHook = () => {
  const signUp = useCustomInstance<UserResponseDTO>();

  return useCallback(
    (loginUserForm: LoginUserForm, signal?: AbortSignal) => {
      return signUp({
        url: `/user/signup`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: loginUserForm,
        signal,
      });
    },
    [signUp],
  );
};

export const useSignUpMutationOptions = <
  TError = ResourceNotFoundError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useSignUpHook>>>,
    TError,
    { data: LoginUserForm },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useSignUpHook>>>,
  TError,
  { data: LoginUserForm },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const signUp = useSignUpHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useSignUpHook>>>,
    { data: LoginUserForm }
  > = (props) => {
    const { data } = props ?? {};

    return signUp(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type SignUpMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useSignUpHook>>>
>;
export type SignUpMutationBody = LoginUserForm;
export type SignUpMutationError = ResourceNotFoundError;

export const useSignUp = <
  TError = ResourceNotFoundError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useSignUpHook>>>,
    TError,
    { data: LoginUserForm },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<ReturnType<typeof useSignUpHook>>>,
  TError,
  { data: LoginUserForm },
  TContext
> => {
  const mutationOptions = useSignUpMutationOptions(options);

  return useMutation(mutationOptions);
};

export const useChangePasswordHook = () => {
  const changePassword = useCustomInstance<UserResponseDTO>();

  return useCallback(
    (loginUserForm: LoginUserForm) => {
      return changePassword({
        url: `/user/signup`,
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        data: loginUserForm,
      });
    },
    [changePassword],
  );
};

export const useChangePasswordMutationOptions = <
  TError = ResourceNotFoundError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useChangePasswordHook>>>,
    TError,
    { data: LoginUserForm },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useChangePasswordHook>>>,
  TError,
  { data: LoginUserForm },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const changePassword = useChangePasswordHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useChangePasswordHook>>>,
    { data: LoginUserForm }
  > = (props) => {
    const { data } = props ?? {};

    return changePassword(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ChangePasswordMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useChangePasswordHook>>>
>;
export type ChangePasswordMutationBody = LoginUserForm;
export type ChangePasswordMutationError = ResourceNotFoundError;

export const useChangePassword = <
  TError = ResourceNotFoundError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useChangePasswordHook>>>,
    TError,
    { data: LoginUserForm },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<ReturnType<typeof useChangePasswordHook>>>,
  TError,
  { data: LoginUserForm },
  TContext
> => {
  const mutationOptions = useChangePasswordMutationOptions(options);

  return useMutation(mutationOptions);
};

export const useLoginHook = () => {
  const login = useCustomInstance<UserResponseDTO>();

  return useCallback(
    (loginUserForm: LoginUserForm, signal?: AbortSignal) => {
      return login({
        url: `/user/login`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: loginUserForm,
        signal,
      });
    },
    [login],
  );
};

export const useLoginMutationOptions = <
  TError = ForbiddenError | ResourceNotFoundError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useLoginHook>>>,
    TError,
    { data: LoginUserForm },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useLoginHook>>>,
  TError,
  { data: LoginUserForm },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const login = useLoginHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useLoginHook>>>,
    { data: LoginUserForm }
  > = (props) => {
    const { data } = props ?? {};

    return login(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type LoginMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useLoginHook>>>
>;
export type LoginMutationBody = LoginUserForm;
export type LoginMutationError = ForbiddenError | ResourceNotFoundError;

export const useLogin = <
  TError = ForbiddenError | ResourceNotFoundError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useLoginHook>>>,
    TError,
    { data: LoginUserForm },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<ReturnType<typeof useLoginHook>>>,
  TError,
  { data: LoginUserForm },
  TContext
> => {
  const mutationOptions = useLoginMutationOptions(options);

  return useMutation(mutationOptions);
};

export const usePostUserManageHook = () => {
  const postUserManage = useCustomInstance<void>();

  return useCallback(
    (signal?: AbortSignal) => {
      return postUserManage({ url: `/user/manage`, method: "POST", signal });
    },
    [postUserManage],
  );
};

export const usePostUserManageMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof usePostUserManageHook>>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof usePostUserManageHook>>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const postUserManage = usePostUserManageHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof usePostUserManageHook>>>,
    void
  > = () => {
    return postUserManage();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostUserManageMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof usePostUserManageHook>>>
>;

export type PostUserManageMutationError = void;

export const usePostUserManage = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof usePostUserManageHook>>>,
    TError,
    void,
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<ReturnType<typeof usePostUserManageHook>>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = usePostUserManageMutationOptions(options);

  return useMutation(mutationOptions);
};

export const useSearchMeetingsHook = () => {
  const searchMeetings = useCustomInstance<MeetingResponseDTOList>();

  return useCallback(
    (params?: SearchMeetingsParams, signal?: AbortSignal) => {
      return searchMeetings({ url: `/meeting`, method: "GET", params, signal });
    },
    [searchMeetings],
  );
};

export const getSearchMeetingsQueryKey = (params?: SearchMeetingsParams) => {
  return [`/meeting`, ...(params ? [params] : [])] as const;
};

export const useSearchMeetingsQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useSearchMeetingsHook>>>,
  TError = unknown,
>(
  params?: SearchMeetingsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useSearchMeetingsHook>>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSearchMeetingsQueryKey(params);

  const searchMeetings = useSearchMeetingsHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useSearchMeetingsHook>>>
  > = ({ signal }) => searchMeetings(params, signal);

  return {
    queryKey,
    queryFn,
    staleTime: 30000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useSearchMeetingsHook>>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type SearchMeetingsQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useSearchMeetingsHook>>>
>;
export type SearchMeetingsQueryError = unknown;

export function useSearchMeetings<
  TData = Awaited<ReturnType<ReturnType<typeof useSearchMeetingsHook>>>,
  TError = unknown,
>(
  params: undefined | SearchMeetingsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useSearchMeetingsHook>>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useSearchMeetingsHook>>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useSearchMeetings<
  TData = Awaited<ReturnType<ReturnType<typeof useSearchMeetingsHook>>>,
  TError = unknown,
>(
  params?: SearchMeetingsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useSearchMeetingsHook>>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useSearchMeetingsHook>>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useSearchMeetings<
  TData = Awaited<ReturnType<ReturnType<typeof useSearchMeetingsHook>>>,
  TError = unknown,
>(
  params?: SearchMeetingsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useSearchMeetingsHook>>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useSearchMeetings<
  TData = Awaited<ReturnType<ReturnType<typeof useSearchMeetingsHook>>>,
  TError = unknown,
>(
  params?: SearchMeetingsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useSearchMeetingsHook>>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = useSearchMeetingsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const useSearchMeetingsSuspenseQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useSearchMeetingsHook>>>,
  TError = unknown,
>(
  params?: SearchMeetingsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useSearchMeetingsHook>>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSearchMeetingsQueryKey(params);

  const searchMeetings = useSearchMeetingsHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useSearchMeetingsHook>>>
  > = ({ signal }) => searchMeetings(params, signal);

  return {
    queryKey,
    queryFn,
    staleTime: 30000,
    ...queryOptions,
  } as UseSuspenseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useSearchMeetingsHook>>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type SearchMeetingsSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useSearchMeetingsHook>>>
>;
export type SearchMeetingsSuspenseQueryError = unknown;

export function useSearchMeetingsSuspense<
  TData = Awaited<ReturnType<ReturnType<typeof useSearchMeetingsHook>>>,
  TError = unknown,
>(
  params: undefined | SearchMeetingsParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useSearchMeetingsHook>>>,
        TError,
        TData
      >
    >;
  },
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useSearchMeetingsSuspense<
  TData = Awaited<ReturnType<ReturnType<typeof useSearchMeetingsHook>>>,
  TError = unknown,
>(
  params?: SearchMeetingsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useSearchMeetingsHook>>>,
        TError,
        TData
      >
    >;
  },
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useSearchMeetingsSuspense<
  TData = Awaited<ReturnType<ReturnType<typeof useSearchMeetingsHook>>>,
  TError = unknown,
>(
  params?: SearchMeetingsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useSearchMeetingsHook>>>,
        TError,
        TData
      >
    >;
  },
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};

export function useSearchMeetingsSuspense<
  TData = Awaited<ReturnType<ReturnType<typeof useSearchMeetingsHook>>>,
  TError = unknown,
>(
  params?: SearchMeetingsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useSearchMeetingsHook>>>,
        TError,
        TData
      >
    >;
  },
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
} {
  const queryOptions = useSearchMeetingsSuspenseQueryOptions(params, options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const useReserveMeetingHook = () => {
  const reserveMeeting = useCustomInstance<MeetingResponseDTO>();

  return useCallback(
    (meetingForm: MeetingForm, signal?: AbortSignal) => {
      return reserveMeeting({
        url: `/meeting`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: meetingForm,
        signal,
      });
    },
    [reserveMeeting],
  );
};

export const useReserveMeetingMutationOptions = <
  TError = BadRequestError | ConflictError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useReserveMeetingHook>>>,
    TError,
    { data: MeetingForm },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useReserveMeetingHook>>>,
  TError,
  { data: MeetingForm },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const reserveMeeting = useReserveMeetingHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useReserveMeetingHook>>>,
    { data: MeetingForm }
  > = (props) => {
    const { data } = props ?? {};

    return reserveMeeting(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ReserveMeetingMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useReserveMeetingHook>>>
>;
export type ReserveMeetingMutationBody = MeetingForm;
export type ReserveMeetingMutationError = BadRequestError | ConflictError;

export const useReserveMeeting = <
  TError = BadRequestError | ConflictError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useReserveMeetingHook>>>,
    TError,
    { data: MeetingForm },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<ReturnType<typeof useReserveMeetingHook>>>,
  TError,
  { data: MeetingForm },
  TContext
> => {
  const mutationOptions = useReserveMeetingMutationOptions(options);

  return useMutation(mutationOptions);
};

export const useGetMeetingByIDHook = () => {
  const getMeetingByID = useCustomInstance<MeetingResponseDTO>();

  return useCallback(
    (meetingId: number, signal?: AbortSignal) => {
      return getMeetingByID({
        url: `/meeting/${meetingId}`,
        method: "GET",
        signal,
      });
    },
    [getMeetingByID],
  );
};

export const getGetMeetingByIDQueryKey = (meetingId: number) => {
  return [`/meeting/${meetingId}`] as const;
};

export const useGetMeetingByIDQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetMeetingByIDHook>>>,
  TError = BadRequestError | ResourceNotFoundError,
>(
  meetingId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetMeetingByIDHook>>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetMeetingByIDQueryKey(meetingId);

  const getMeetingByID = useGetMeetingByIDHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useGetMeetingByIDHook>>>
  > = ({ signal }) => getMeetingByID(meetingId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!meetingId,
    staleTime: 30000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetMeetingByIDHook>>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetMeetingByIDQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useGetMeetingByIDHook>>>
>;
export type GetMeetingByIDQueryError = BadRequestError | ResourceNotFoundError;

export function useGetMeetingByID<
  TData = Awaited<ReturnType<ReturnType<typeof useGetMeetingByIDHook>>>,
  TError = BadRequestError | ResourceNotFoundError,
>(
  meetingId: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetMeetingByIDHook>>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetMeetingByIDHook>>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetMeetingByID<
  TData = Awaited<ReturnType<ReturnType<typeof useGetMeetingByIDHook>>>,
  TError = BadRequestError | ResourceNotFoundError,
>(
  meetingId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetMeetingByIDHook>>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<ReturnType<typeof useGetMeetingByIDHook>>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetMeetingByID<
  TData = Awaited<ReturnType<ReturnType<typeof useGetMeetingByIDHook>>>,
  TError = BadRequestError | ResourceNotFoundError,
>(
  meetingId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetMeetingByIDHook>>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetMeetingByID<
  TData = Awaited<ReturnType<ReturnType<typeof useGetMeetingByIDHook>>>,
  TError = BadRequestError | ResourceNotFoundError,
>(
  meetingId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetMeetingByIDHook>>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = useGetMeetingByIDQueryOptions(meetingId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const useGetMeetingByIDSuspenseQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetMeetingByIDHook>>>,
  TError = BadRequestError | ResourceNotFoundError,
>(
  meetingId: number,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetMeetingByIDHook>>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetMeetingByIDQueryKey(meetingId);

  const getMeetingByID = useGetMeetingByIDHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useGetMeetingByIDHook>>>
  > = ({ signal }) => getMeetingByID(meetingId, signal);

  return {
    queryKey,
    queryFn,
    staleTime: 30000,
    ...queryOptions,
  } as UseSuspenseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetMeetingByIDHook>>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetMeetingByIDSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useGetMeetingByIDHook>>>
>;
export type GetMeetingByIDSuspenseQueryError =
  | BadRequestError
  | ResourceNotFoundError;

export function useGetMeetingByIDSuspense<
  TData = Awaited<ReturnType<ReturnType<typeof useGetMeetingByIDHook>>>,
  TError = BadRequestError | ResourceNotFoundError,
>(
  meetingId: number,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetMeetingByIDHook>>>,
        TError,
        TData
      >
    >;
  },
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetMeetingByIDSuspense<
  TData = Awaited<ReturnType<ReturnType<typeof useGetMeetingByIDHook>>>,
  TError = BadRequestError | ResourceNotFoundError,
>(
  meetingId: number,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetMeetingByIDHook>>>,
        TError,
        TData
      >
    >;
  },
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetMeetingByIDSuspense<
  TData = Awaited<ReturnType<ReturnType<typeof useGetMeetingByIDHook>>>,
  TError = BadRequestError | ResourceNotFoundError,
>(
  meetingId: number,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetMeetingByIDHook>>>,
        TError,
        TData
      >
    >;
  },
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};

export function useGetMeetingByIDSuspense<
  TData = Awaited<ReturnType<ReturnType<typeof useGetMeetingByIDHook>>>,
  TError = BadRequestError | ResourceNotFoundError,
>(
  meetingId: number,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetMeetingByIDHook>>>,
        TError,
        TData
      >
    >;
  },
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
} {
  const queryOptions = useGetMeetingByIDSuspenseQueryOptions(
    meetingId,
    options,
  );

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const useUpdateMeetingHook = () => {
  const updateMeeting = useCustomInstance<MeetingResponseDTO>();

  return useCallback(
    (meetingId: number, meetingForm: MeetingForm) => {
      return updateMeeting({
        url: `/meeting/${meetingId}`,
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        data: meetingForm,
      });
    },
    [updateMeeting],
  );
};

export const useUpdateMeetingMutationOptions = <
  TError =
    | BadRequestError
    | ForbiddenError
    | ResourceNotFoundError
    | ConflictError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useUpdateMeetingHook>>>,
    TError,
    { meetingId: number; data: MeetingForm },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useUpdateMeetingHook>>>,
  TError,
  { meetingId: number; data: MeetingForm },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const updateMeeting = useUpdateMeetingHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useUpdateMeetingHook>>>,
    { meetingId: number; data: MeetingForm }
  > = (props) => {
    const { meetingId, data } = props ?? {};

    return updateMeeting(meetingId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateMeetingMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useUpdateMeetingHook>>>
>;
export type UpdateMeetingMutationBody = MeetingForm;
export type UpdateMeetingMutationError =
  | BadRequestError
  | ForbiddenError
  | ResourceNotFoundError
  | ConflictError;

export const useUpdateMeeting = <
  TError =
    | BadRequestError
    | ForbiddenError
    | ResourceNotFoundError
    | ConflictError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useUpdateMeetingHook>>>,
    TError,
    { meetingId: number; data: MeetingForm },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<ReturnType<typeof useUpdateMeetingHook>>>,
  TError,
  { meetingId: number; data: MeetingForm },
  TContext
> => {
  const mutationOptions = useUpdateMeetingMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * 要素の削除
 */
export const useCancelMeetingHook = () => {
  const cancelMeeting = useCustomInstance<void>();

  return useCallback(
    (meetingId: number) => {
      return cancelMeeting({ url: `/meeting/${meetingId}`, method: "DELETE" });
    },
    [cancelMeeting],
  );
};

export const useCancelMeetingMutationOptions = <
  TError = BadRequestError | ResourceNotFoundError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useCancelMeetingHook>>>,
    TError,
    { meetingId: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useCancelMeetingHook>>>,
  TError,
  { meetingId: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const cancelMeeting = useCancelMeetingHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useCancelMeetingHook>>>,
    { meetingId: number }
  > = (props) => {
    const { meetingId } = props ?? {};

    return cancelMeeting(meetingId);
  };

  return { mutationFn, ...mutationOptions };
};

export type CancelMeetingMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useCancelMeetingHook>>>
>;

export type CancelMeetingMutationError =
  | BadRequestError
  | ResourceNotFoundError;

export const useCancelMeeting = <
  TError = BadRequestError | ResourceNotFoundError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useCancelMeetingHook>>>,
    TError,
    { meetingId: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<ReturnType<typeof useCancelMeetingHook>>>,
  TError,
  { meetingId: number },
  TContext
> => {
  const mutationOptions = useCancelMeetingMutationOptions(options);

  return useMutation(mutationOptions);
};
